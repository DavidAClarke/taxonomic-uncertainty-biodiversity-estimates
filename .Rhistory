pk_raw <- raw_range(pk_comp_raw)
row.names(pk_raw) <- "Promachocrinus kerguelensis (s.l.)"
pk_raw <- as.data.frame(t(raw_range(pk_comp_raw)))
row.names(pk_raw) <- "Promachocrinus kerguelensis (s.l.)"
range_raw <- data.frame(eoo = c(), aoo = c())
for(s in species_names){
dd <- range_prepare(bio_data, "new", s)
raw <- as.data.frame(t(raw_range(dd)))
row.names(raw) <- s
range_raw <- rbind(range_raw, raw)
}
range_raw <- bind_rows(pk_raw, range_raw)
range_raw
sum(31,30,61,69,93,102)
boxplot(range_raw$eoo)
boxplot(range_raw$aoo)
boxplot(log(range_raw$aoo))
boxplot(log(range_raw$eoo))
var(log(range_raw$eoo))
var(log(range_raw$aoo))
var(log(range_raw$aoo[-1,]))
range_raw[-1,]$eoo
var(log(range_raw[-1,]$aoo))
var(log(range_raw[-1,]$eoo))
pkcomp_rs_eoo_b0.5 <- loadRData(file = here(dirname(here()),"data", "biodiversity", "output", "range_size", "fut_rs_eoo_pkcomp_b_0.5.RData"))
pk_rs_eoo_b0.5 <- loadRData(file = here(dirname(here()),"data", "biodiversity", "output", "range_size", "fut_rs_eoo_pk_b_0.5.RData"))
pkcomp_rs_aoo_b0.5 <- loadRData(file = here(dirname(here()),"data", "biodiversity", "output", "range_size", "fut_rs_aoo_pkcomp_b_0.5.RData"))
pk_rs_aoo_b0.5 <- loadRData(file = here(dirname(here()),"data", "biodiversity", "output", "range_size", "fut_rs_aoo_pk_b_0.5.RData"))
# fut_eoo_vals_0.5 <- c(fut_pk_comp_range_0.5[[1]], fut_pk_comp_205026_range_0.5[[1]],
#                   fut_pk_comp_205045_range_0.5[[1]], fut_pk_comp_205060_range_0.5[[1]],
#                   fut_pk_comp_205085_range_0.5[[1]], fut_pk_comp_210026_range_0.5[[1]],
#                   fut_pk_comp_210045_range_0.5[[1]], fut_pk_comp_210060_range_0.5[[1]],
#                   fut_pk_comp_210085_range_0.5[[1]], fut_pk_range_0.5[[1]],
#                   fut_pk_205026_range_0.5[[1]], fut_pk_205045_range_0.5[[1]],
#                   fut_pk_205060_range_0.5[[1]], fut_pk_205085_range_0.5[[1]],
#                   fut_pk_210026_range_0.5[[1]], fut_pk_210045_range_0.5[[1]],
#                   fut_pk_210060_range_0.5[[1]], fut_pk_210085_range_0.5[[1]])
# save(fut_eoo_vals_0.5, file = here("data", "biodiversity", "output", "range_size", "fut_eoo_vals_0.5.RData"))
pkcomp_rs_eoo_b0.75 <- loadRData(file = here(dirname(here()),"data", "biodiversity", "output", "range_size", "fut_rs_eoo_pkcomp_b_0.75.RData"))
pk_rs_eoo_b0.75 <- loadRData(file = here(dirname(here()),"data", "biodiversity", "output", "range_size", "fut_rs_eoo_pk_b_0.75.RData"))
pkcomp_rs_aoo_b0.75 <- loadRData(file = here(dirname(here()),"data", "biodiversity", "output", "range_size", "fut_rs_aoo_pkcomp_b_0.75.RData"))
pk_rs_aoo_b0.75 <- loadRData(file = here(dirname(here()),"data", "biodiversity", "output", "range_size", "fut_rs_aoo_pk_b_0.75.RData"))
sp <- c(rep("P. kerguelensis (s.l.)", 180), rep("P. kerguelensis", 180))
year <- rep(c(rep("2023",20), rep("2050", 80), rep("2100", 80)),2)
scenario <- rep(c(rep("Current",20),
rep(c(rep("RCP 2.6",20),
rep("RCP 4.5",20),
rep("RCP 6.0",20),
rep("RCP 8.5",20)),2)),2)
fut_eoo_vals_0.5 <- c(pkcomp_rs_eoo_b0.5, pk_rs_eoo_b0.5)
fut_eoo_vals_0.75 <- c(pkcomp_rs_eoo_b0.75, pk_rs_eoo_b0.75)
fut_aoo_vals_0.5 <- c(pkcomp_rs_aoo_b0.5, pk_rs_aoo_b0.5)
fut_aoo_vals_0.75 <- c(pkcomp_rs_aoo_b0.75, pk_rs_aoo_b0.75)
range_df <- data.frame(species = sp,
year = year,
scenario = scenario,
eoo_0.5 = fut_eoo_vals_0.5,
eoo_0.75 = fut_eoo_vals_0.75,
aoo_0.5 = fut_aoo_vals_0.5,
aoo_0.75 = fut_aoo_vals_0.75)
fut_2050 <- range_df %>% filter(year == 2050)
ggstatsplot::grouped_ggbetweenstats(data = fut_2050,
y = eoo_0.75,
x = species,
grouping.var = scenario,
type = "nonparametric",
pairwise.display = "significant", # "none"
results.subtitle = T,
p.adjust.method = "holm",
nboot = 200)
ggstatsplot::grouped_ggbetweenstats(data = fut_2050,
y = eoo_0.5,
x = species,
grouping.var = scenario,
type = "nonparametric",
pairwise.display = "significant", # "none"
results.subtitle = T,
p.adjust.method = "holm",
nboot = 200)
ggstatsplot::grouped_ggbetweenstats(data = fut_2050,
y = aoo_0.5,
x = species,
grouping.var = scenario,
type = "nonparametric",
pairwise.display = "significant", # "none"
results.subtitle = T,
p.adjust.method = "holm",
nboot = 200)
11.71/2.58
hypervolume_res_path <- here(dirname(here()),"data", "biodiversity", "output", "hypervolumes")
## Hypervolumes
hv_pk_comp <- readRDS(here(hypervolume_res_path, "hv_Pk_comp_m50.rds"))
hv_pk_comp@Name <- "P. kerguelensis (s.l.)"
hv_pkn <- readRDS(here(hypervolume_res_path, "hv_Pkn_m50.rds"))
hv_pkn@Name <- "P. kerguelensis"
hv_pf <- readRDS(here(hypervolume_res_path, "hv_Pf_m50.rds"))
hv_pu <- readRDS(here(hypervolume_res_path, "hv_Pu_m50.rds"))
hv_pus <- readRDS(here(hypervolume_res_path, "hv_Pus_m50.rds"))
hv_pus@Name <- "P. uskglassi"
hv_pj <- readRDS(here(hypervolume_res_path, "hv_Pj_m50.rds"))
hv_pm <- readRDS(here(hypervolume_res_path, "hv_Pm_m50.rds"))
hv_list <- list(hv_pk_comp, hv_pkn,hv_pf,hv_pu,hv_pus,hv_pj,hv_pm)
rm(hv_pk_comp,hv_pkn,hv_pf,hv_pu,hv_pus,hv_pj,hv_pm)
templist <- new("HypervolumeList")
templist@HVList <- hv_list
mycols <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288", "#AA4499", "#888888")
plot.HypervolumeList(templist,
colors = mycols,
cex.names = 1.5,
cex.legend = 1,
show.legend = F,
names = c("Phosphate (Lt. max)", "Current Velocity (Lt. min)",
"Dissolved Oxygen (Min)", "Dissolved Oxygen (Range)",
"Silicate (Range)"))
hv_set_ops <- loadRData(here(dirname(here()),"data", "biodiversity", "output", "hypervolumes", "hv_set_ops.RData"))
View(hv_set_ops)
hv_set_ops[[1]]
hv_overlaps <- loadRData(here(dirname(here()),"data", "biodiversity", "output", "hypervolumes", "hv_overlaps.RData"))
hv_overlaps[[1]]
hv_overlaps[[10]]
Dses <- c(2.09,
5.74,
3.67,
2.58,
8.68,
4.42,
1.14,
2.58,
1.81,
0.69,
2.8,
9.73,
2.63,
2.58,
10.75,
3.52,
9.87,
2.58,
2.58,
6.17)
Ises <- c(2.7,
6.88,
6.22,
2.58,
2.58,
11.57,
2.17,
11.71,
3.25,
2.58,
6.83,
14.3,
4.61,
2.58,
19.2,
5.12,
15.14,
2.58,
2.58,
2.58)
Jses <- c(3.62,
4.40,
0.20,
0.86,
3.15,
0.69,
3.29,
2.81,
6.42,
7.05,
3.57,
2.81,
5.87,
1.35,
2.32,
2.81,
2.81,
1.85,
6.65,
3.21,
2.81)
Sses <- c(4.00,
5.08,
0.25,
0.85,
3.61,
0.69,
3.29,
2.81,
2.81,
10.00,
4.33,
2.81,
7.84,
1.40,
2.60,
2.81,
2.81,
1.85,
9.53,
3.68,
2.81)
ses <- c(Dses, Ises, Jses, Sses)
ses_df <- data.frame(ses = ses, metric = c(rep("D", length(Dses)),
rep("I", length(Ises)),
rep("J", length(Jses)),
rep("S", length(Sses))))
boxplot(ses ~ metric, ses_df)
ggstatsplot::ggbetweenstats(data = ses_df,
y = ses,
x = metric,
type = "nonparametric",
pairwise.display = "significant", # "none"
results.subtitle = T,
p.adjust.method = "holm",
nboot = 200)
ses_df
range_df
range_raw
plot(range_raw$eoo, range_raw$aoo)
plot(log(range_raw$eoo), log(range_raw$aoo))
26523279/28925954*100
93/208*100
ras_ant_proj <- rast(here(dirname(here()),"data", "environmental", "promach_preds_min.tif"))
pred_combs <- read.csv(here(dirname(here()),"data", "environmental", "pred_vars.csv"))
occurrence <- bio_data %>%
dplyr::mutate(x = sf::st_coordinates(.)[,1]) %>%
dplyr::mutate(y = sf::st_coordinates(.)[,2]) %>%
dplyr::select(x,y) %>%
sf::st_drop_geometry()
total <- terra::extract(scale(preds[[j]]), .) %>% # extract values of raster covariates
as.data.frame()
total <- terra::extract(ras_ant_proj, .) %>% # extract values of raster covariates
as.data.frame()
total <- occurrence %>% terra::extract(ras_ant_proj, .) %>% # extract values of raster covariates
as.data.frame()
total
occurrence <- bio_data %>%
dplyr::filter(scientificName == "Promachocrinus kerguelensis") %>%
dplyr::mutate(x = sf::st_coordinates(.)[,1]) %>%
dplyr::mutate(y = sf::st_coordinates(.)[,2]) %>%
dplyr::select(x,y) %>%
sf::st_drop_geometry()
total <- occurrence %>% terra::extract(ras_ant_proj, .) %>% # extract values of raster covariates
as.data.frame()
range(total$BO_bathymean_lonlat)
occurrence <- bio_data %>%
dplyr::filter(scientificName == "Promachocrinus fragarius") %>%
dplyr::mutate(x = sf::st_coordinates(.)[,1]) %>%
dplyr::mutate(y = sf::st_coordinates(.)[,2]) %>%
dplyr::select(x,y) %>%
sf::st_drop_geometry()
total <- occurrence %>% terra::extract(ras_ant_proj, .) %>% # extract values of raster covariates
as.data.frame()
range(total$BO_bathymean_lonlat)
View(total)
which(total$BO_bathymean_lonlat > 0)
total <- total[-279,]
range(total$BO_bathymean_lonlat)
## Obtain raw predictor values for each occurrence record----
raw_vals <- function(data, species, preds){
occurrence <- data %>%
dplyr::filter(scientificName == species) %>%
dplyr::mutate(x = sf::st_coordinates(.)[,1]) %>%
dplyr::mutate(y = sf::st_coordinates(.)[,2]) %>%
dplyr::select(x,y) %>%
sf::st_drop_geometry()
total <- occurrence %>%
terra::extract(preds, .) %>%
as.data.frame()
return(total)
}
raw_val_df <- data.frame()
for(s in species_names){
vals <- raw_vals(bio_data, s, ras_ant_proj)
vals <- data.frame(species = rep(s, nrow(vals)), vals)
raw_val_df <- bind_rows(raw_val_df, vals)
}
View(raw_val_df)
raw_val_df <- raw_val_df %>% dplyr::select(-ID)
raw_val_df <- raw_val_df %>% pivot_longer(.)
raw_val_df <- raw_val_df %>% pivot_longer(cols = (.))
raw_val_df <- raw_val_df %>% pivot_longer(cols = all_of(.))
raw_val_df <- raw_val_df %>% pivot_longer(cols = -1)
View(raw_val_df)
ggplot(raw_val_df, aes(x=name, y=value) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~Species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
ggplot(raw_val_df, aes(x=name, y=value) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~Species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
ggplot(raw_val_df, aes(x=name, y=value) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~Species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip())
ggplot(raw_val_df, aes(x=name, y=value)) +
geom_boxplot() +
facet_wrap(~Species, scale = "free", nrow = 2)
ggplot(raw_val_df, aes(x=name, y=value)) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~Species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
ggplot(raw_val_df, aes(x=name, y=value)) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
ggplot(raw_val_df, aes(x=name, y=value)) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~species, scale = "free", nrow = 2) +
theme_bw()
raw_val_df <- raw_val_df %>% mutate(name = ifelse(str_detect(name,"Depth"),
str_split_i(name,"Depth.", 2),"Depth")) %>%
mutate(name = gsub(".Lt.min", " (Lt. min)", name)) %>%
mutate(name = gsub(".Lt.max", " (Lt. max)", name)) %>%
mutate(name = gsub(".Range", " (Range)", name)) %>%
mutate(name = gsub(".Mean", " (mean)", name)) %>%
mutate(name = gsub(".Min", " (Min)", name)) %>%
mutate(name = gsub("Dissolved.oxygen", "Dissolved oxygen", name)) %>%
mutate(name = gsub("Current.Velocity", "Current velocity", name))
raw_val_df <- raw_val_df %>%
mutate(name = gsub("Present.Benthic.Mean.Depth.", "", name)) %>%
mutate(name = gsub("BO_bathymean_lonlat", "Depth", name))
View(raw_val_df)
ggplot(raw_val_df, aes(x=name, y=value)) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~species, scale = "free", nrow = 2) +
theme_bw()
ggplot(raw_val_df, aes(x=name, y=value)) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
ggplot(raw_val_df, aes(x=name, y=log(value)) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
ggplot(raw_val_df, aes(x=name, y=log(value))) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
ggplot(raw_val_df, aes(x=name, y=sqrt(value))) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
ggplot(raw_val_df, aes(x=name, y=log(abs(value)))) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
no_depth <- raw_val_df %>% filter(name != "Depth")
depth <- raw_val_df %>% filter(name == "Depth")
ggplot(no_depth, aes(x=name, y=value)) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
ggplot(no_depth, aes(x=name, y=log(value))) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
ggplot(depth, aes(x=name, y=value)) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
ggplot(depth, aes(x=species, y=value)) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~species, scale = "free", nrow = 2)
ggplot(depth, aes(x=species, y=value)) +
geom_boxplot(alpha = 0.6) +
facet_wrap(~species, scale = "free", nrow = 2)
ggplot(depth, aes(x=species, y=value)) +
geom_boxplot(alpha = 0.6) +
theme_bw()
which(raw_val_df$value > 0)
which(raw_val_df$name == "Depth" & raw_val_df$value > 0)
raw_val_df <- raw_val_df[-which(raw_val_df$name == "Depth" & raw_val_df$value > 0),]
depth <- raw_val_df %>% filter(name == "Depth")
no_depth <- raw_val_df %>% filter(name != "Depth")
ggplot(depth, aes(x=species, y=value)) +
geom_boxplot(alpha = 0.6) +
theme_bw()
ggplot(depth, aes(x=species, y=value)) +
geom_boxplot(alpha = 0.6) +
theme_bw() +
coord_flip()
depth_fig <- ggplot(depth, aes(x=species, y=value)) +
geom_boxplot() +
theme_bw() +
coord_flip() +
ylab("Depth") +
xlab("Species")
ggplot(no_depth, aes(x=name, y=log(value))) +
geom_boxplot() +
facet_wrap(~species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
ggplot(no_depth, aes(x=name, y=value)) +
geom_boxplot() +
facet_wrap(~species, scale = "free", nrow = 2) +
theme_bw() +
coord_flip()
ggplot(no_depth, aes(x=name, y=log(value))) +
geom_boxplot() +
facet_wrap(~species, nrow = 2) +
theme_bw() +
coord_flip()
no_depth_fig <- ggplot(no_depth, aes(x=name, y=log(value))) +
geom_boxplot() +
facet_wrap(~species, nrow = 2) +
theme_bw() +
coord_flip() +
ylab("Variable")
ggpubr::ggarrange(no_depth_fig, depth_fig, ncol = 1, nrow = 2)
no_depth_fig <- ggplot(no_depth, aes(x=name, y=log(value))) +
geom_boxplot() +
facet_wrap(~species, nrow = 2) +
theme_bw() +
coord_flip() +
xlab("Variable")
ggpubr::ggarrange(no_depth_fig, depth_fig, ncol = 1, nrow = 2)
ggpubr::ggarrange(no_depth_fig, depth_fig, ncol = 1, nrow = 2, labels = "AUTO")
citation("virtualspecies")
## Load the required libraries
pkgs <- c("sf","tidyverse","here","terra","raster","sdmpredictors", "usdm",
"randomForest", "precrec","lubridate", "parzer", "adehabitatHR",
"hypervolume", "caret", "redlistr", "rcartocolor", "ENMTools")
lapply(pkgs, require, character.only = T)
################################################################################
## Load user-defined functions
source("R/01_functions.R")
hypervolume_res_path <- here(dirname(here()),"data", "biodiversity", "output", "hypervolumes")
bio_data <- read.csv(here(dirname(here()),"data", "biodiversity",
"output", "merged_new_tax.csv")) %>%
spatially_explicit("decimalLongitude",
"decimalLatitude",
4326) %>%
st_transform("ESRI:102019") %>%
dplyr::mutate(Longitude = st_coordinates(.)[,1]) %>%
dplyr::mutate(Latitude = st_coordinates(.)[,2]) %>%
dplyr::mutate(year_grp = as.factor(case_when(year >= 1996 & year < 2008 ~ "G1",
year >= 2008 ~ "G2"))) %>%
tidyr::drop_na(year)
ras_ant_proj <- rast(here(dirname(here()),"data", "environmental", "promach_preds_min.tif"))
pred_combs <- read.csv(here(dirname(here()),"data", "environmental", "pred_vars.csv"))
## Create predictor stacks
pred_list <- c()
for(i in 1:nrow(pred_combs)){
preds <- as.character(pred_combs[i,])
env_sub <- subset(ras_ant_proj,c(preds))
pred_list[[i]] <- env_sub
}
pf_occurrence <- bio_data %>%
dplyr::filter(scientificName == "Promachocrinus fragarius") %>%
dplyr::mutate(x = sf::st_coordinates(.)[,1]) %>%
dplyr::mutate(y = sf::st_coordinates(.)[,2]) %>%
dplyr::select(x,y) %>%
sf::st_drop_geometry()
pf_bg <- dismo::randomPoints(raster::stack(pred_list[[50]]), n = 50000) %>%
as.data.frame()
pkn_occurrence <- bio_data %>%
dplyr::filter(scientificName == "Promachocrinus kerguelensis") %>%
dplyr::mutate(x = sf::st_coordinates(.)[,1]) %>%
dplyr::mutate(y = sf::st_coordinates(.)[,2]) %>%
dplyr::select(x,y) %>%
sf::st_drop_geometry()
pkn_bg <- dismo::randomPoints(raster::stack(pred_list[[50]]), n = 50000) %>%
as.data.frame()
pkn_pf_id_test <- identity.test(pkn_occurrence, pf_occurrence,
pkn_bg, pf_bg,
"P. kerguelensis", "P. fragarius",
env = terra::scale(pred_list[[50]]),
type = "rf",
nreps = 99)
en <- Sys.time()
en - st
save(pkn_pf_id_test, file = here(dirname(here()),"data", "biodiversity", "output", "identity_tests", "pkn_pf_id_test.RData"))
idt <- loadRData(file = here(dirname(here()),"data", "biodiversity", "output", "identity_tests", "pkn_pf_id_test.RData"))
D_obs <- get(objects()[which(objects() == idt)])$reps.overlap[1,1]
idt
idt$reps.overlap[1,1]
idt$reps.overlap[-1,1]
idt$reps.overlap[1,2]
D_est <- idt$reps.overlap[-1,1]
D_sw <- shapiro.test(D_est)$p.value
D_obs <- idt$reps.overlap[1,1]
if(D_sw > 0.05){
D_ses <- BAT::ses(D_obs, D_est, param = T, p = F)
} else {
D_ses <- BAT::ses(D_obs, D_est, param = F, p = F)
}
D_ses
I_obs <- idt$reps.overlap[1,2]
I_est <- idt$reps.overlap[-1,2]
I_sw <- shapiro.test(I_est)$p.value
if(I_sw > 0.05){
I_ses <- BAT::ses(I_obs, I_est, param = T, p = F)
} else {
I_ses <- BAT::ses(I_obs, I_est, param = F, p = F)
}
I_ses
