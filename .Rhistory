get(load(here(dirname(here()),"data", "biodiversity", "output",
"identity_tests", id_tests[1])))
idt <- gsub(".RData", "", id_tests[1])
id_tests_emp_df <- bind_rows(id_tests_emp_df, get(objects()[which(objects() == idt)])$reps.overlap[1,])
id_tests_pval_df <- bind_rows(id_tests_pval_df, get(objects()[which(objects() == idt)])$p.values)
D_obs <- get(objects()[which(objects() == idt)])$reps.overlap[1,1]
D_est <- get(objects()[which(objects() == idt)])$reps.overlap[-1,1]
I_obs <- get(objects()[which(objects() == idt)])$reps.overlap[1,2]
I_est <- get(objects()[which(objects() == idt)])$reps.overlap[-1,2]
D_sw <- shapiro.test(D_est)$p.value
I_sw <- shapiro.test(I_est)$p.value
if(D_sw > 0.05){
D_ses <- BAT::ses(D_obs, D_est, param = T, p = F)
} else {
D_ses <- BAT::ses(D_obs, D_est, param = F, p = F)
}
if(I_sw > 0.05){
I_ses <- BAT::ses(I_obs, I_est, param = T, p = F)
} else {
I_ses <- BAT::ses(I_obs, I_est, param = F, p = F)
}
id_tests_pval_df <- bind_cols(id_tests_pval_df, D_ses, I_ses)
View(id_tests_pval_df)
id_tests_emp_df <- data.frame()
id_tests_pval_df <- data.frame()
id_tests_emp_df <- bind_rows(id_tests_emp_df, get(objects()[which(objects() == idt)])$reps.overlap[1,])
id_tests_pval_df <- bind_rows(id_tests_pval_df, get(objects()[which(objects() == idt)])$p.values)
data.frame(id_tests_pval_df, D_ses = D_ses, I_ses = I_ses)
id_tests_pval_df <- id_tests_pval_df %>% bind_rows(id_tests_pval_df)
id_tests_pval <- get(objects()[which(objects() == idt)])$p.values
id_tests_pval_df <- id_tests_pval_df %>% bind_rows(data.frame(id_tests_pval, D_ses = D_ses, I_ses = I_ses))
id_tests_pval_df
id_tests_pval
data.frame(id_tests_pval, D_ses = D_ses, I_ses = I_ses)
data.frame(t(id_tests_pval), D_ses = D_ses, I_ses = I_ses)
id_tests_pval_df <- data.frame()
id_tests_pval_df <- id_tests_pval_df %>% bind_rows(data.frame(t(id_tests_pval), D_ses = D_ses, I_ses = I_ses))
View(id_tests_pval_df)
rm(id_tests_emp_df, id_tests_pval_df, p_pk_comp_id_test)
gc()
rm(coast)
gc()
## Calculate and return Identity test information (incl. standardised effect sizes) - SDM----
id_test_info <- function(pth){
id_tests <- list.files(pth)
id_tests_emp_df <- data.frame()
id_tests_pval_df <- data.frame()
for(i in 1:length(id_tests)){
get(load(here(pth, id_tests[i])))
idt <- gsub(".RData", "", id_tests[i])
D_obs <- get(objects()[which(objects() == idt)])$reps.overlap[1,1]
D_est <- get(objects()[which(objects() == idt)])$reps.overlap[-1,1]
I_obs <- get(objects()[which(objects() == idt)])$reps.overlap[1,2]
I_est <- get(objects()[which(objects() == idt)])$reps.overlap[-1,2]
# Calculate standard effect sizes from observed and estimated values
# BAT::ses() follows Cardillo and Warren 2016 (if param=T)
D_sw <- shapiro.test(D_est)$p.value
I_sw <- shapiro.test(I_est)$p.value
if(D_sw > 0.05){
D_ses <- BAT::ses(D_obs, D_est, param = T, p = F)
} else {
D_ses <- BAT::ses(D_obs, D_est, param = F, p = F)
}
if(I_sw > 0.05){
I_ses <- BAT::ses(I_obs, I_est, param = T, p = F)
} else {
I_ses <- BAT::ses(I_obs, I_est, param = F, p = F)
}
id_tests_emp_df <- bind_rows(id_tests_emp_df,
get(objects()[which(objects() == idt)])$reps.overlap[1,])
id_tests_pval_df <- id_tests_pval_df %>%
bind_rows(data.frame(t(get(objects()[which(objects() == idt)])$p.values),
D_ses = D_ses,
I_ses = I_ses))
rm(list=ls(pattern = idt))
gc()
}
rownames(id_tests_emp_df) <- id_tests
rownames(id_tests_pval_df) <- id_tests
return(list(id_tests_pval_df, id_tests_emp_df))
}
gc()
id_test_info(pth = here(dirname(here)), "data", "biodiversity", "output", "identity_tests")
gc()
rm(pred_combs)
gc()
rm(list = ls())
gc()
id_test_info(pth = here(dirname(here()), "data", "biodiversity", "output", "identity_tests"))
## Calculate and return Identity test information (incl. standardised effect sizes) - SDM----
id_test_info <- function(pth){
id_tests <- list.files(pth)
id_tests_emp_df <- data.frame()
id_tests_pval_df <- data.frame()
for(i in 1:length(id_tests)){
get(load(here(pth, id_tests[i])))
idt <- gsub(".RData", "", id_tests[i])
D_obs <- get(objects()[which(objects() == idt)])$reps.overlap[1,1]
D_est <- get(objects()[which(objects() == idt)])$reps.overlap[-1,1]
I_obs <- get(objects()[which(objects() == idt)])$reps.overlap[1,2]
I_est <- get(objects()[which(objects() == idt)])$reps.overlap[-1,2]
# Calculate standard effect sizes from observed and estimated values
# BAT::ses() follows Cardillo and Warren 2016 (if param=T)
D_sw <- shapiro.test(D_est)$p.value
I_sw <- shapiro.test(I_est)$p.value
if(D_sw > 0.05){
D_ses <- BAT::ses(D_obs, D_est, param = T, p = F)
} else {
D_ses <- BAT::ses(D_obs, D_est, param = F, p = F)
}
if(I_sw > 0.05){
I_ses <- BAT::ses(I_obs, I_est, param = T, p = F)
} else {
I_ses <- BAT::ses(I_obs, I_est, param = F, p = F)
}
id_tests_emp_df <- bind_rows(id_tests_emp_df,
get(objects()[which(objects() == idt)])$reps.overlap[1,])
id_tests_pval_df <- id_tests_pval_df %>%
bind_rows(data.frame(t(get(objects()[which(objects() == idt)])$p.values),
D_ses = D_ses,
I_ses = I_ses))
rm(list=ls(pattern = idt))
gc()
}
rownames(id_tests_emp_df) <- id_tests
rownames(id_tests_pval_df) <- id_tests
return(list(id_tests_pval_df, id_tests_emp_df))
}
id_test_info(pth = here(dirname(here()), "data", "biodiversity", "output", "identity_tests"))
id_tests <- list.files(here(dirname(here()), "data", "biodiversity", "output", "identity_tests"))
id_tests_emp_df <- data.frame()
id_tests_pval_df <- data.frame()
get(load(here(pth, id_tests[1])))
get(load(here(here(dirname(here()), "data", "biodiversity", "output", "identity_tests"), id_tests[1])))
idt <- gsub(".RData", "", id_tests[1])
D_obs <- get(objects()[which(objects() == idt)])$reps.overlap[1,1]
D_est <- get(objects()[which(objects() == idt)])$reps.overlap[-1,1]
I_obs <- get(objects()[which(objects() == idt)])$reps.overlap[1,2]
I_est <- get(objects()[which(objects() == idt)])$reps.overlap[-1,2]
D_sw <- shapiro.test(D_est)$p.value
I_sw <- shapiro.test(I_est)$p.value
if(D_sw > 0.05){
D_ses <- BAT::ses(D_obs, D_est, param = T, p = F)
} else {
D_ses <- BAT::ses(D_obs, D_est, param = F, p = F)
}
if(I_sw > 0.05){
I_ses <- BAT::ses(I_obs, I_est, param = T, p = F)
} else {
I_ses <- BAT::ses(I_obs, I_est, param = F, p = F)
}
id_tests_emp_df <- bind_rows(id_tests_emp_df,
get(objects()[which(objects() == idt)])$reps.overlap[1,])
t(get(objects()[which(objects() == idt)])$p.values)
id_tests_pval_df <- id_tests_pval_df %>%
bind_rows(data.frame(t(get(objects()[which(objects() == idt)])$p.values),
D_ses = D_ses,
I_ses = I_ses))
data.frame(t(get(objects()[which(objects() == idt)])$p.values)
data.frame(t(get(objects()[which(objects() == idt)])$p.values))
data.frame(t(get(objects()[which(objects() == idt)])$p.values),
D_ses = D_ses,
I_ses = I_ses)
id_tests_pval_df %>%
bind_rows(data.frame(t(get(objects()[which(objects() == idt)])$p.values),
D_ses = D_ses,
I_ses = I_ses))
bind_rows(data.frame(t(get(objects()[which(objects() == idt)])$p.values),
D_ses = D_ses,
I_ses = I_ses))
df <- data.frame(t(get(objects()[which(objects() == idt)])$p.values),
D_ses = D_ses,
I_ses = I_ses)
id_tests_pval_df %>%
bind_rows(df)
gc()
gc()
rm(list = ls())
## Calculate and return Identity test information (incl. standardised effect sizes) - SDM----
id_test_info <- function(pth){
id_tests <- list.files(pth)
id_tests_emp_df <- data.frame()
id_tests_pval_df <- data.frame()
for(i in 1:length(id_tests)){
get(load(here(pth, id_tests[i])))
idt <- gsub(".RData", "", id_tests[i])
D_obs <- get(objects()[which(objects() == idt)])$reps.overlap[1,1]
D_est <- get(objects()[which(objects() == idt)])$reps.overlap[-1,1]
I_obs <- get(objects()[which(objects() == idt)])$reps.overlap[1,2]
I_est <- get(objects()[which(objects() == idt)])$reps.overlap[-1,2]
# Calculate standard effect sizes from observed and estimated values
# BAT::ses() follows Cardillo and Warren 2016 (if param=T)
D_sw <- shapiro.test(D_est)$p.value
I_sw <- shapiro.test(I_est)$p.value
if(D_sw > 0.05){
D_ses <- BAT::ses(D_obs, D_est, param = T, p = F)
} else {
D_ses <- BAT::ses(D_obs, D_est, param = F, p = F)
}
if(I_sw > 0.05){
I_ses <- BAT::ses(I_obs, I_est, param = T, p = F)
} else {
I_ses <- BAT::ses(I_obs, I_est, param = F, p = F)
}
id_tests_emp_df <- bind_rows(id_tests_emp_df,
get(objects()[which(objects() == idt)])$reps.overlap[1,])
df <- data.frame(t(get(objects()[which(objects() == idt)])$p.values),
D_ses = D_ses,
I_ses = I_ses)
id_tests_pval_df <- bind_rows(id_tests_pval_df, df)
rm(list=ls(pattern = idt))
gc()
}
rownames(id_tests_emp_df) <- id_tests
rownames(id_tests_pval_df) <- id_tests
return(list(id_tests_pval_df, id_tests_emp_df))
}
gc()
id_test_info(pth = here(dirname(here()), "data", "biodiversity", "output", "identity_tests"))
Pk_comp_Pkn_ot <- readRDS(here(dirname(here()),"data", "biodiversity", "output", "hypervolumes",
"Pk_comp_Pkn_ot.rds"))
Pk_comp_Pkn_ot$distribution
get(load(here(dirname(here()),"data", "biodiversity", "output", "hypervolumes", "hv_overlaps.RData")))
hv_overlaps <- get(load(here(dirname(here()),"data", "biodiversity", "output", "hypervolumes", "hv_overlaps.RData")))
gc()
ov_df <- data.frame(jaccard = numeric(),
sorensen = numeric(),
frac_unique_1 = numeric(),
frac_unique_2 = numeric())
for(i in 1:length(hv_overlaps)){
df <- as.data.frame(t(as.data.frame(unlist(hv_overlaps[[i]]))))
ov_df <- bind_rows(ov_df, df)
row.names(ov_df) <- NULL
}
species_1 <- c(rep(hv_list[[1]]@Name,6), rep(hv_list[[2]]@Name,5),
rep(hv_list[[3]]@Name,4), rep(hv_list[[4]]@Name,3),
rep(hv_list[[5]]@Name,2), hv_list[[6]]@Name)
hypervolume_res_path <- here(dirname(here()),"data", "biodiversity", "output", "hypervolumes")
hv_pk_comp <- readRDS(here(hypervolume_res_path, "hv_Pk_comp_m50.rds"))
hv_pk_comp@Name <- "P. kerguelensis (s.l.)"
hv_pkn <- readRDS(here(hypervolume_res_path, "hv_Pkn_m50.rds"))
hv_pkn@Name <- "P. kerguelensis"
hv_pf <- readRDS(here(hypervolume_res_path, "hv_Pf_m50.rds"))
hv_pu <- readRDS(here(hypervolume_res_path, "hv_Pu_m50.rds"))
hv_pus <- readRDS(here(hypervolume_res_path, "hv_Pus_m50.rds"))
hv_pus@Name <- "P. uskglassi"
hv_pj <- readRDS(here(hypervolume_res_path, "hv_Pj_m50.rds"))
hv_pm <- readRDS(here(hypervolume_res_path, "hv_Pm_m50.rds"))
hv_list <- list(hv_pk_comp, hv_pkn,hv_pf,hv_pu,hv_pus,hv_pj,hv_pm)
rm(hv_pk_comp,hv_pkn,hv_pf,hv_pu,hv_pus,hv_pj,hv_pm)
gc()
species_1 <- c(rep(hv_list[[1]]@Name,6), rep(hv_list[[2]]@Name,5),
rep(hv_list[[3]]@Name,4), rep(hv_list[[4]]@Name,3),
rep(hv_list[[5]]@Name,2), hv_list[[6]]@Name)
species_2 <- c(hv_list[[2]]@Name,hv_list[[3]]@Name,hv_list[[4]]@Name,
hv_list[[5]]@Name,hv_list[[6]]@Name, hv_list[[7]]@Name,
hv_list[[3]]@Name, hv_list[[4]]@Name, hv_list[[5]]@Name,
hv_list[[6]]@Name, hv_list[[7]]@Name, hv_list[[4]]@Name,
hv_list[[5]]@Name, hv_list[[6]]@Name, hv_list[[7]]@Name,
hv_list[[5]]@Name,hv_list[[6]]@Name,hv_list[[7]]@Name,
hv_list[[6]]@Name,hv_list[[7]]@Name,
hv_list[[7]]@Name)
fin_ov_df <- data.frame(species_1, species_2, round(ov_df,2))
fin_ov_df
hv_overlaps[1:6]
fin_ov_df[1:6,]
hv_ovs <- list.files(here(dirname(here()),"data", "biodiversity", "output", "hypervolumes"))
hv_ovt <- hv_ovs[str_detect(hv_ovs, "ot")]
hv_ovt_df <- data.frame()
for(i in 1:length(hv_ovt)){
hvn <- gsub(".rds", "", hv_ovt[i])
ot <- readRDS(here("data", "biodiversity", "output", "hypervolumes",
hv_ovt[i]))
otr <- bind_cols(hvn, ot$p_values$jaccard, ot$p_values$sorensen,
ot$p_values$frac_unique_1,ot$p_values$frac_unique_2)
hv_ovt_df <- bind_rows(hv_ovt_df, otr)
}
for(i in 1:length(hv_ovt)){
hvn <- gsub(".rds", "", hv_ovt[i])
ot <- readRDS(here(dirname(here()),"data", "biodiversity", "output", "hypervolumes",
hv_ovt[i]))
otr <- bind_cols(hvn, ot$p_values$jaccard, ot$p_values$sorensen,
ot$p_values$frac_unique_1,ot$p_values$frac_unique_2)
hv_ovt_df <- bind_rows(hv_ovt_df, otr)
}
hv_ovt_df
fin_ov_df
hv_ovt
hv_ovs
str_detect(hv_ovs, "^(?!.*Pko (?:ot))")
str_detect(hv_ovs, "(?!.*Pko (?:ot))")
str_detect(hv_ovs, "(Pko)(?=\\s(ot))", negate = TRUE)
str_detect(hv_ovs, "(Pko)(?=\\s(ot))", negate = F)
str_detect(hv_ovs, "Pko")
str_detect(hv_ovs, "*Pko*ot*", negate = T)
str_detect(hv_ovs, glob2rx("*Pko*ot*"), negate = T)
hv_ovs[str_detect(hv_ovs, glob2rx("*Pko*ot*"), negate = T)]
hv_ovs[str_detect(hv_ovs, glob2rx("*Pko*ot*"), negate = T),]
hv_ovs[str_detect(hv_ovs, glob2rx("*ot*Pko*"), negate = T)]
hv_ovs[str_detect(hv_ovs, glob2rx("*ot*Pko*"), negate = F)]
hv_ovs[str_detect(hv_ovs, glob2rx("*ot*-Pko*"), negate = F)]
hv_ovt[str_detect(hv_ovt, "Pko", negate = T)]
hv <- hv_ovs[str_detect(hv_ovs, "ot")][str_detect(hv_ovs[str_detect(hv_ovs, "ot")], "Pko", negate = T)]
View(fin_ov_df)
?sort
factor(hv, levels = c("Pk_comp_Pkn_ot.rds", "Pk_comp_Pf_ot.rds", "Pk_comp_Pu_ot.rds", "Pk_comp_Pus_ot.rds",
"Pk_comp_Pj_ot.rds", "Pk_comp_Pm_ot.rds", "Pkn_Pf_ot.rds", "Pkn_Pu_ot.rds",
"Pkn_Pus_ot.rds", "Pkn_Pj_ot.rds", "Pkn_Pm_ot.rds", "Pf_Pu_ot.rds", "Pf_Pus_ot.rds","Pf_Pj_ot.rds", "Pf_Pm_ot.rds", "Pu_Pus_ot.rds", "Pu_Pj_ot.rds", "Pu_Pm_ot.rds", "Pus_Pj_ot.rds", "Pus_Pm_ot.rds", "Pj_Pm_ot.rds"))
hv <- factor(hv, levels = c("Pk_comp_Pkn_ot.rds", "Pk_comp_Pf_ot.rds", "Pk_comp_Pu_ot.rds", "Pk_comp_Pus_ot.rds",
"Pk_comp_Pj_ot.rds", "Pk_comp_Pm_ot.rds", "Pkn_Pf_ot.rds", "Pkn_Pu_ot.rds",
"Pkn_Pus_ot.rds", "Pkn_Pj_ot.rds", "Pkn_Pm_ot.rds", "Pf_Pu_ot.rds", "Pf_Pus_ot.rds","Pf_Pj_ot.rds", "Pf_Pm_ot.rds", "Pu_Pus_ot.rds", "Pu_Pj_ot.rds", "Pu_Pm_ot.rds", "Pus_Pj_ot.rds", "Pus_Pm_ot.rds", "Pj_Pm_ot.rds"))
sort(hv)
hv <- factor(hv, levels = c("Pk_comp_Pkn_ot.rds", "Pk_comp_Pf_ot.rds", "Pk_comp_Pu_ot.rds", "Pk_comp_Pus_ot.rds",
"Pk_comp_Pj_ot.rds", "Pk_comp_Pm_ot.rds", "Pkn_Pf_ot.rds", "Pkn_Pu_ot.rds",
"Pkn_Pus_ot.rds", "Pkn_Pj_ot.rds", "Pkn_Pm_ot.rds", "Pf_Pu_ot.rds", "Pf_Pus_ot.rds","Pf_Pj_ot.rds", "Pf_Pm_ot.rds", "Pu_Pus_ot.rds", "Pu_Pj_ot.rds", "Pu_Pm_ot.rds", "Pus_Pj_ot.rds", "Pus_Pm_ot.rds", "Pj_Pm_ot.rds")) |> sort()
hv
gc()
hv_ovt_df <- data.frame()
hv_ovt <- hv_ovs[str_detect(hv_ovs, "ot")][str_detect(hv_ovs[str_detect(hv_ovs, "ot")], "Pko", negate = T)]
hv_ovt <- factor(hv_ovt, levels = c("Pk_comp_Pkn_ot.rds", "Pk_comp_Pf_ot.rds",
"Pk_comp_Pu_ot.rds", "Pk_comp_Pus_ot.rds",
"Pk_comp_Pj_ot.rds", "Pk_comp_Pm_ot.rds",
"Pkn_Pf_ot.rds", "Pkn_Pu_ot.rds","Pkn_Pus_ot.rds",
"Pkn_Pj_ot.rds", "Pkn_Pm_ot.rds", "Pf_Pu_ot.rds",
"Pf_Pus_ot.rds","Pf_Pj_ot.rds", "Pf_Pm_ot.rds",
"Pu_Pus_ot.rds", "Pu_Pj_ot.rds", "Pu_Pm_ot.rds",
"Pus_Pj_ot.rds", "Pus_Pm_ot.rds", "Pj_Pm_ot.rds")) |>
sort()
hvn <- gsub(".rds", "", hv_ovt[1])
hv_overlaps[[1]]
View(fin_ov_df)
hv_overlaps[[1]][1]
as.numeric(hv_overlaps[[1]][1])
ot$distribution[,1]
ot$distribution
as.numeric(ot$distribution[,1])
J_obs <- as.numeric(hv_overlaps[[1]][1])
S_obs <- as.numeric(hv_overlaps[[1]][2])
ot <- readRDS(here("data", "biodiversity", "output", "hypervolumes",
hv_ovt[1]))
ot <- readRDS(here(dirname(here()),"data", "biodiversity", "output", "hypervolumes",
hv_ovt[1]))
J_est <- as.numeric(ot$distribution[,1])
S_est <- as.numeric(ot$distribution[,2])
ses(J_obs, J_est)
ses(J_obs, J_est, param = F)
## 3.3 | Environmental niche----
# Identity tests
id_tests <- id_test_info(pth = here(dirname(here()), "data", "biodiversity",
"output", "identity_tests"))
id_tests
ses(J_obs, J_est, param = F)
ses(S_obs, S_est, param = F)
ses(S_obs, S_est, param = T)
ses(J_obs, J_est, param = T)
## Hypervolume overlap test information----
hv_ot_info <- function(fl_names, hv_path, hv_over_stats){
hv_ovt_df <- data.frame()
for(i in 1:seq_along(fl_names)){
hvn <- gsub(".rds", "", fl_names[i])
J_obs <- as.numeric(hv_over_stats[[i]][1])
S_obs <- as.numeric(hv_over_stats[[i]][2])
ot <- readRDS(here(hv_path, fl_names[i]))
J_est <- as.numeric(ot$distribution[,1])
S_est <- as.numeric(ot$distribution[,2])
J_sw <- shapiro.test(J_est)$p.value
S_sw <- shapiro.test(S_est)$p.value
if(J_sw > 0.05){
J_ses <- BAT::ses(J_obs, J_est, param = T, p = F)
} else {
J_ses <- BAT::ses(J_obs, J_est, param = F, p = F)
}
if(S_sw > 0.05){
S_ses <- BAT::ses(S_obs, S_est, param = T, p = F)
} else {
S_ses <- BAT::ses(S_obs, S_est, param = F, p = F)
}
otr <- data.frame(comparison = hvn,
jac = ot$p_values$jaccard,
sor = ot$p_values$sorensen,
fr_un_1 = ot$p_values$frac_unique_1,
fr_un_2 = ot$p_values$frac_unique_2,
jac_ses = J_ses,
sor_ses = S_ses)
hv_ovt_df <- bind_rows(hv_ovt_df, otr)
}
return(hv_ovt_df)
}
gc()
hv_tests <- hv_ot_info(fl_names = hv_ovt,
hv_path = here(dirname(here()),"data", "biodiversity", "output", "hypervolumes"),
hv_over_stats = hv_overlaps)
View(hv_tests)
hv_ovt
seq_along(hv_ovt)
hv_ovt[1]
as.character(hv_ovt)
hv_ovs <- list.files(here("data", "biodiversity", "output", "hypervolumes"))
hv_ovt <- hv_ovs[str_detect(hv_ovs, "ot")][str_detect(hv_ovs[str_detect(hv_ovs, "ot")], "Pko", negate = T)]
hv_ovt <- factor(hv_ovt, levels = c("Pk_comp_Pkn_ot.rds", "Pk_comp_Pf_ot.rds",
"Pk_comp_Pu_ot.rds", "Pk_comp_Pus_ot.rds",
"Pk_comp_Pj_ot.rds", "Pk_comp_Pm_ot.rds",
"Pkn_Pf_ot.rds", "Pkn_Pu_ot.rds","Pkn_Pus_ot.rds",
"Pkn_Pj_ot.rds", "Pkn_Pm_ot.rds", "Pf_Pu_ot.rds",
"Pf_Pus_ot.rds","Pf_Pj_ot.rds", "Pf_Pm_ot.rds",
"Pu_Pus_ot.rds", "Pu_Pj_ot.rds", "Pu_Pm_ot.rds",
"Pus_Pj_ot.rds", "Pus_Pm_ot.rds", "Pj_Pm_ot.rds")) |>
sort() |>
as.character()
hv_tests <- hv_ot_info(fl_names = hv_ovt,
hv_path = here(dirname(here()),"data", "biodiversity", "output", "hypervolumes"),
hv_over_stats = hv_overlaps)
hv_ovs <- list.files(here(dirname(here()),"data", "biodiversity", "output", "hypervolumes"))
hv_ovt <- hv_ovs[str_detect(hv_ovs, "ot")][str_detect(hv_ovs[str_detect(hv_ovs, "ot")], "Pko", negate = T)]
hv_ovt <- factor(hv_ovt, levels = c("Pk_comp_Pkn_ot.rds", "Pk_comp_Pf_ot.rds",
"Pk_comp_Pu_ot.rds", "Pk_comp_Pus_ot.rds",
"Pk_comp_Pj_ot.rds", "Pk_comp_Pm_ot.rds",
"Pkn_Pf_ot.rds", "Pkn_Pu_ot.rds","Pkn_Pus_ot.rds",
"Pkn_Pj_ot.rds", "Pkn_Pm_ot.rds", "Pf_Pu_ot.rds",
"Pf_Pus_ot.rds","Pf_Pj_ot.rds", "Pf_Pm_ot.rds",
"Pu_Pus_ot.rds", "Pu_Pj_ot.rds", "Pu_Pm_ot.rds",
"Pus_Pj_ot.rds", "Pus_Pm_ot.rds", "Pj_Pm_ot.rds")) |>
sort() |>
as.character()
hv_tests <- hv_ot_info(fl_names = hv_ovt,
hv_path = here(dirname(here()),"data", "biodiversity", "output", "hypervolumes"),
hv_over_stats = hv_overlaps)
for(i in 1:seq_along(hv_ovt)){print(i)}
for(i in 1:length(hv_ovt)){print(i)}
## Hypervolume overlap test information----
hv_ot_info <- function(fl_names, hv_path, hv_over_stats){
hv_ovt_df <- data.frame()
for(i in 1:length(fl_names)){
hvn <- gsub(".rds", "", fl_names[i])
J_obs <- as.numeric(hv_over_stats[[i]][1])
S_obs <- as.numeric(hv_over_stats[[i]][2])
ot <- readRDS(here(hv_path, fl_names[i]))
J_est <- as.numeric(ot$distribution[,1])
S_est <- as.numeric(ot$distribution[,2])
J_sw <- shapiro.test(J_est)$p.value
S_sw <- shapiro.test(S_est)$p.value
if(J_sw > 0.05){
J_ses <- BAT::ses(J_obs, J_est, param = T, p = F)
} else {
J_ses <- BAT::ses(J_obs, J_est, param = F, p = F)
}
if(S_sw > 0.05){
S_ses <- BAT::ses(S_obs, S_est, param = T, p = F)
} else {
S_ses <- BAT::ses(S_obs, S_est, param = F, p = F)
}
otr <- data.frame(comparison = hvn,
jac = ot$p_values$jaccard,
sor = ot$p_values$sorensen,
fr_un_1 = ot$p_values$frac_unique_1,
fr_un_2 = ot$p_values$frac_unique_2,
jac_ses = J_ses,
sor_ses = S_ses)
hv_ovt_df <- bind_rows(hv_ovt_df, otr)
}
return(hv_ovt_df)
}
hv_tests <- hv_ot_info(fl_names = hv_ovt,
hv_path = here(dirname(here()),"data", "biodiversity", "output", "hypervolumes"),
hv_over_stats = hv_overlaps)
View(hv_tests)
plot(hv_tests$jac_ses, hv_tests$sor_ses)
plot(id_tests[[1]]$D_ses, id_tests[[1]]$I_ses)
cor(id_tests[[1]]$D_ses, id_tests[[1]]$I_ses)
plot(hv_tests$jac_ses[1:6,], hv_tests$sor_ses[1:6,])
hv_tests$jac_ses[1:6,]
hv_tests$jac_ses[1:6]
plot(hv_tests$jac_ses[1:6], hv_tests$sor_ses[1:6])
fin_ov_df %>%
rename("Species 1" = "species_1") %>%
rename("Species 2" = "species_2") %>%
rename("Jaccard" = "jaccard") %>%
rename("Sorensen" = "sorensen") %>%
rename("Frac unique sp1" = "frac_unique_1") %>%
rename("Frac unique sp2" = "frac_unique_2") %>%
mutate(id1 = c(rep(1,6),rep(2,5),rep(3,4),rep(4,3),rep(5,2),6)) %>%
relocate(id1) %>%
mutate(id2 = c(2,3,4,5,6,7,3,4,5,6,7,4,5,6,7,5,6,7,6,7,7)) %>%
relocate(id2, .before = "Species 2")
minmaxdf <- data.frame("Species 1" = c("min", "max"),
"Species 2" = c("min", "max"),
"Jaccard" = c(0,1),
"Sorensen" = c(0,1),
"Frac unique sp1" = c(0,1),
"Frac unique sp2" = c(0,1)) %>%
rename("Species 1" = "Species.1") %>%
rename("Species 2" = "Species.2") %>%
rename("Frac unique sp1" = "Frac.unique.sp1") %>%
rename("Frac unique sp2" = "Frac.unique.sp2") %>%
mutate(id1 = c(10,11)) %>%
relocate(id1) %>%
mutate(id2 = c(10,11)) %>%
relocate(id2, .before = "Species 2")
fin_ov_df_clean <- fin_ov_df %>%
rename("Species 1" = "species_1") %>%
rename("Species 2" = "species_2") %>%
rename("Jaccard" = "jaccard") %>%
rename("Sorensen" = "sorensen") %>%
rename("Frac unique sp1" = "frac_unique_1") %>%
rename("Frac unique sp2" = "frac_unique_2") %>%
mutate(id1 = c(rep(1,6),rep(2,5),rep(3,4),rep(4,3),rep(5,2),6)) %>%
relocate(id1) %>%
mutate(id2 = c(2,3,4,5,6,7,3,4,5,6,7,4,5,6,7,5,6,7,6,7,7)) %>%
relocate(id2, .before = "Species 2") %>%
bind_rows(minmaxdf)
fin_ov_df_clean
rm(list = ls())
